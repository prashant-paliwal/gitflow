stages:
  - test
  - build
  - deploy

# Define common variables
variables:
  GIT_STRATEGY: fetch
  DJANGO_SETTINGS_MODULE: myapp.settings
  POSTGRES_DB: mydb
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB

# Define a service for PostgreSQL
services:
  - postgres:latest

# Cache for pip
cache:
  paths:
    - .cache/pip

# Install dependencies and run tests on feature branches and develop
test:
  stage: test
  script:
    - pip install -r requirements.txt
    - python manage.py migrate
    - python manage.py test
  only:
    - develop
    - /^feature\/.*$/
  dependencies:
    - postgres

# Collect static files and build the project on develop branch
build:
  stage: build
  script:
    - pip install -r requirements.txt
    - python manage.py collectstatic --noinput
  only:
    - develop
  dependencies:
    - test

# Deploy to staging for release and hotfix branches
deploy_staging:
  stage: deploy
  script:
    - echo "Deploying to staging..."
    - ./deploy_staging.sh  # You can modify this to fit your deployment process
  only:
    - /^release\/.*$/
    - /^hotfix\/.*$/

# Deploy to production for master branch
deploy_production:
  stage: deploy
  script:
    - echo "Deploying to production..."
    - ./deploy_production.sh  # You can modify this to fit your production deployment
  only:
    - master


